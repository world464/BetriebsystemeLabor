Nr.1a)
Lesen Sie sich die Dokumentation zum System Call pipe() mittels man 2 pipe sowie die
generelle Dokumentation zu Pipes mittels man 7 pipe durch.
Was ist das Argument des System Calls?
    - Pipe(2) hier 2, es werden zwei Filedeskriptoren erstellt für das Read End und Write End.

Was ist das Schreib- und was das Leseende der Pipe?
    - The array pipefd is used to return  two  file  descriptors referring  to the ends of the pipe.
    - pipefd[0] refers to the read end of the pipe.
    - pipefd[1] refers to the write end of the pipe.

Kann eine Pipe auch bidirektional verwendet werden?
    - Nein, eine Pipe ist unidirektional also hat nur eine Richtung in der Nachrichten versendet werden können.

Falls nein, wie kann man eine bidirektionale Kommunikation
zwischen Prozessen realisieren?
    - Man kann zwei Pipes gleichzeitig öffnen von zwei kommunizierenden Prozessen.
    Jeweils ein Schreib und Lesende zuordenen, damit können beide Prozesse sich gegenseitig
    Narichten schicken.

Nr. 2 a)
Wie wird das Lesen und Schreiben auf eine Named Pipe realisiert?
    -  Nachdem ein spezielles Fifo File erstellt wurde, kann jeder Prozess es öffnen um es zu lesen oder schreiben
    wie eine normale Datei.
    -  Es muss an beiden Enden gleichzeitig geöffnet werden, befor eine I/O Operation geöffnet werden kann.
    Andernfalls blockiert es und wartet auf den anderen Prozess.

Wie kann eine Named Pipe wieder geschlossen und gelöscht werden?

 TODO: keine Ahnung

 Nr. 2b)
Mkfifo Datei erstellen mit einem pathname: mkfifo <name>

                    -m, --mode=MODE
                          set file permission bits to MODE, not a=rw - umask

                   -Z     set the SELinux security context to default type

                   --context[=CTX]
                          like -Z, or if CTX is specified then set the SELinux or SMACK security con‐
                          text to CTX

                   --help display this help and exit

                   --version
                          output version information and exit

 Nr. 2c)
Was passiert mit Nachrichten, die gesendet wurden, bevor ein Empfänger lief?

Der Sender wartet bis der Empfänger die erste Nachricht gelesen hat.

Was passiert, wenn der Sender-Prozess beendet wird, während noch Empfänger-Prozesse laufen?
-Der Empfänger printet die letzte gesendete Zahl aus, bis 100 Zahlen gesendet wurden.

 Was passiert, wenn Sie mehrere Empfänger oder Sender starten?

Werd 1 Sender gestartet aber 2 Empfänger, teilen sich beide Empfänger die Zahlen gleichmäßig auf.
(Empfänger 1 printet die ungeraden Zahlen aus, Empfänger 2 die geraden Zahlen)

Werden 2 Sender gestartet aber nur 1 Empfänger, werden die Zahlen jedes Senders auf der Konsole
ausgegeben.

Nr. 3a)
 System Calls - socket():

 Create an Endpoint for communication and returns a file discriptor that refers to that endpoint


int setsockopt(int sockfd, int level, int optname,
                      const void *optval, socklen_t optlen);
    Damit kann man Optionen einstellen für ein File mit einer Filedescriptornummer (sockfd).
    Dabei muss der Name und das Level der Option angegeben werden. Level = SQL_Socket
    Das Level gibt an auf welcher Schicht diese Option angewant wird. Also Level 3 = TCP
    Die Argumente optval, optlen kann man die Option einstellen. Das Protokoll nimmt die Parameter von Option
     und Interpretiert diese.


 ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
                      const struct sockaddr *dest_addr, socklen_t addrlen);
    The system calls send(), sendto(), and sendmsg() are used to transmit a message to another socket.

int bind(int sockfd, const struct sockaddr *addr,
                socklen_t addrlen);
    “assigning a name to a socket”.
    Ein Socket wird mit socket() erstellt, danach exestiert es in einem Namensraum(dieser gehört zu einer Adressfamilie),
    hat aber selbst keine spezifische Adresse.
    Bind löst diese Problematik in dem es dem File(sockfd) eine Adresse zuweist. addrlen ist die Länge.
    Wichtig:   It is normally necessary to assign a local address using bind() before a SOCK_STREAM socket may receive connections (see accept(2)).

 ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
                        struct sockaddr *src_addr, socklen_t *addrlen);
 The  recv(),  recvfrom(),  and recvmsg() calls are used to receive messages from a socket.



Nr.3 b)

uint32_t htonl(uint32_t hostlong);
The htonl() function converts the unsigned integer hostlong from host byte order to network byte order.


uint16_t htons(uint16_t hostshort);
The htons() function converts the unsigned short integer hostshort from host byte order to network byte order.


in_addr_t inet_addr(const char *cp);
The  inet_addr()  function  converts  the Internet host address cp from IPv4 numbers-and-dots notation into binary data in network byte order.


char *inet_ntoa(struct in_addr in);
The  inet_ntoa() function converts the Internet host address in, given in network byte order, to a string in IPv4 dotted-decimal notation.


Nr.3 c)

Asynchrone: Sender kann jederzeit Daten schicken und empfänger verarbeitet diese gleichzeitig

Synchrone: Empfänger wartet auf Nachricht vom Empfänger und verarbeitet die Nachricht, solange kann der sender keine neuen Daten schicken


Nr.3 d)

In der Internet-Protocol-Version IPv4 ist hierfür der Adressbereich zwischen 224.0.0.0 und 239.255.255.255 reserviert,
während für Multicast-Adressen in IPv6 der Beginn FF00::/8 vorgesehen ist.

